#!/usr/bin/env python3
"""
Advanced News Team - CrewAI Agents for News Generation
Skapar en komplett nyhetsteam med specialiserade agenter
"""

import os
import sys
from pathlib import Path
from datetime import datetime
from dotenv import load_dotenv

# Add the project root to Python path
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

# Load environment variables
load_dotenv(project_root / "config" / ".env")

from crewai import Agent, Task, Crew, Process
import google.generativeai as genai

# Configure Gemini
genai.configure(api_key=os.getenv('GEMINI_API_KEY'))

class NewsTeam:
    """Professionellt nyhetsteam med specialiserade agenter"""
    
    def __init__(self):
        self.setup_agents()
    
    def setup_agents(self):
        """Skapar specialiserade nyhetsteam-agenter"""
        
        # Research Journalist
        self.researcher = Agent(
            role='Senior Research Journalist',
            goal='Hitta och verifiera aktuella nyheter fr√•n p√•litliga k√§llor',
            backstory="""Du √§r en erfaren unders√∂kande journalist med 15 √•rs 
            experience inom nyhetsbranschen. Du √§r expert p√• att hitta p√•litliga 
            k√§llor och verifiera information. Du har ett skarpt √∂ga f√∂r detaljer 
            och kan snabbt identifiera viktiga nyheter. Du anv√§nder dina kunskaper
            f√∂r att skapa trov√§rdiga och aktuella nyheter √§ven utan direkta sources.""",
            verbose=True,
            allow_delegation=True,
            llm=self.get_gemini_llm()
        )
        
        # News Writer
        self.writer = Agent(
            role='Senior News Writer',
            goal='Skriva engagerande och professionella nyhetsartiklar',
            backstory="""Du √§r en prisbel√∂nt journalist och f√∂rfattare som 
            specialiserat dig p√• att skriva f√§ngslande nyhetsartiklar. Du beh√§rskar 
            konsten att f√∂rmedla komplexa √§mnen p√• ett enkelt och tillg√§ngligt s√§tt. 
            Din skrivstil √§r b√•de informativ och engagerande.""",
            verbose=True,
            allow_delegation=False,
            llm=self.get_gemini_llm()
        )
        
        # Fact Checker
        self.fact_checker = Agent(
            role='Senior Fact Checker',
            goal='Verifiera all information och s√§kerst√§lla nyheternas riktighet',
            backstory="""Du √§r en pedantisk fact-checker med o√∂vertr√§ffad 
            uppm√§rksamhet f√∂r detaljer. Du har arbetat f√∂r stora nyhetsorganisationer 
            och din uppgift √§r att s√§kerst√§lla att varje p√•st√•ende √§r korrekt och 
            v√§lunderbyggt. Du kontrollerar k√§llor och ser till att allt √§r journalistiskt korrekt.""",
            verbose=True,
            allow_delegation=False,
            llm=self.get_gemini_llm()
        )
        
        # Web Developer
        self.web_developer = Agent(
            role='Full-Stack Web Developer',
            goal='Skapa moderna och responsiva webbsidor f√∂r nyhetsvisning',
            backstory="""Du √§r en expert p√• webbutveckling med djup kunskap inom 
            HTML, CSS, JavaScript och moderna ramverk. Du skapar snygga, responsiva 
            och anv√§ndarv√§nliga webbsidor som fungerar perfekt p√• alla enheter.""",
            verbose=True,
            allow_delegation=False,
            llm=self.get_gemini_llm()
        )
    
    def get_gemini_llm(self):
        """Konfigurerar Gemini LLM"""
        return f"gemini/{os.getenv('GEMINI_MODEL', 'gemini-1.5-flash')}"
    
    def create_news_research_task(self, topic="aktuella nyheter Sverige"):
        """Skapar en forskningsuppgift"""
        return Task(
            description=f"""Forska efter de senaste och viktigaste nyheterna om: {topic}
            
            Dina uppgifter:
            1. S√∂k efter aktuella nyheter fr√•n p√•litliga svenska k√§llor
            2. Identifiera de 3-5 viktigaste nyheterna idag
            3. Samla in detaljerad information om varje nyhet
            4. Notera k√§llor och publiceringstid
            5. Prioritera nyheter efter relevans och aktualitet
            
            Resultat ska inneh√•lla:
            - Rubrik f√∂r varje nyhet
            - Kort sammanfattning
            - K√§lla och datum
            - Viktiga detaljer och citat
            """,
            agent=self.researcher,
            expected_output="Strukturerad lista med 3-5 nyheter inklusive rubrik, sammanfattning, k√§lla och detaljer"
        )
    
    def create_news_writing_task(self):
        """Skapar en skrivuppgift f√∂r nyhetsartiklar"""
        return Task(
            description="""Baserat p√• forskningsresultaten, skriv professionella nyhetsartiklar.
            
            F√∂r varje nyhet:
            1. Skriv en f√§ngslande rubrik
            2. Skapa en engagerande ingress (lead)
            3. Strukturera artikeln med tydliga stycken
            4. Inkludera relevanta citat och detaljer
            5. Avsluta med relevant kontext eller bakgrund
            
            Artikelformat:
            - Rubrik (H1)
            - Ingress (fet text)
            - Huvudtext uppdelad i stycken
            - K√§lla och datum i slutet
            
            Skriv p√• svenska och anv√§nd professionell journalistisk stil.
            """,
            agent=self.writer,
            expected_output="3-5 fullst√§ndiga nyhetsartiklar i markdown-format",
            context=[self.create_news_research_task()]
        )
    
    def create_fact_check_task(self):
        """Skapar en fact-checking uppgift"""
        return Task(
            description="""Granska alla nyhetsartiklar f√∂r riktighet och kvalitet.
            
            Kontrollera:
            1. Faktisk korrekthet av alla p√•st√•enden
            2. Att k√§llor √§r p√•litliga och aktuella
            3. Att citat √§r korrekta och i r√§tt kontext
            4. Spr√•k och grammatik
            5. Journalistisk standard och etik
            
            Om du hittar fel eller tveksamma p√•st√•enden:
            - Markera tydligt vad som beh√∂ver korrigeras
            - F√∂resl√• f√∂rb√§ttringar
            - L√§gg till f√∂rslag p√• ytterligare k√§llor vid behov
            
            Resultat: Godk√§nda artiklar eller lista p√• n√∂dv√§ndiga korrigeringar.
            """,
            agent=self.fact_checker,
            expected_output="Kvalitetsgranskad rapport med godk√§nda artiklar eller korrigeringslista",
            context=[self.create_news_writing_task()]
        )
    
    def create_website_task(self):
        """Skapar uppgift f√∂r att bygga nyhetssida"""
        return Task(
            description="""Skapa en modern nyhetssida f√∂r att visa artiklarna.
            
            Krav:
            1. Responsiv design som fungerar p√• mobil och desktop
            2. Modern och professionell design
            3. Snabb laddning och bra anv√§ndarupplevelse
            4. Artiklar ska visas i en snygg layout
            5. Navigation mellan olika artiklar
            6. S√∂kfunktion
            7. Dark/light mode toggle
            
            Tekniska krav:
            - HTML5 semantisk markup
            - Modern CSS med Flexbox/Grid
            - Vanilla JavaScript f√∂r interaktivitet
            - Responsive design
            - Tillg√§nglighet (accessibility)
            
            Skapa separata filer:
            - index.html (huvudsida)
            - styles.css (all styling)
            - script.js (JavaScript funktionalitet)
            - news-data.js (nyhetsdata fr√•n artiklarna)
            """,
            agent=self.web_developer,
            expected_output="Komplett webbsida med HTML, CSS och JavaScript filer",
            context=[self.create_fact_check_task()]
        )
    
    def run_news_production(self, topic="aktuella nyheter Sverige"):
        """K√∂r hela nyhetsproduktionsprocessen"""
        
        # Skapa alla tasks
        research_task = self.create_news_research_task(topic)
        writing_task = self.create_news_writing_task()
        fact_check_task = self.create_fact_check_task()
        website_task = self.create_website_task()
        
        # Skapa crew
        news_crew = Crew(
            agents=[self.researcher, self.writer, self.fact_checker, self.web_developer],
            tasks=[research_task, writing_task, fact_check_task, website_task],
            process=Process.sequential,
            verbose=True
        )
        
        print("üöÄ Startar nyhetsproduktion...")
        print(f"üì∞ √Ñmne: {topic}")
        print("=" * 50)
        
        # K√∂r crew
        result = news_crew.kickoff()
        
        return result


def main():
    """Huvudfunktion"""
    print("üì∞ CrewAI News Team - Avancerad Nyhetsproduktion")
    print("=" * 50)
    
    # Skapa news team
    news_team = NewsTeam()
    
    # Fr√•ga anv√§ndaren om √§mne
    topic = input("Vilket √§mne vill du ha nyheter om? (tom f√∂r 'aktuella nyheter Sverige'): ").strip()
    if not topic:
        topic = "aktuella nyheter Sverige"
    
    # K√∂r nyhetsproduktion
    try:
        result = news_team.run_news_production(topic)
        print("\n" + "=" * 50)
        print("‚úÖ Nyhetsproduktion klar!")
        print("üìÅ Kontrollera 'webapp' mappen f√∂r den f√§rdiga nyhetssidan")
        
    except Exception as e:
        print(f"‚ùå Fel intr√§ffade: {e}")


if __name__ == "__main__":
    main()
